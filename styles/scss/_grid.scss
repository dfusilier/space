
/*
 * VARIABLES
 **/

$GRID_COLUMNS: 12 !default;

$GRID_CONTAINERS: (
  xs: 360px,
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px
) !default;


 
/*
 * UTILITY CLASSES
 **/

%container {
  position: relative;
  margin-left: auto;
  margin-right: auto;

  // Necessary to stop horizontal scrolling if using 
  // gutters with padding on right.
  // overflow: hidden;
}

// Containers that max out at a certain breakpoint
@mixin make-container-max-widths($containers: $GRID_CONTAINERS) {
  @each $breakpointKey, $maxValue in $containers {

    .container-max-#{$breakpointKey} {
      @extend %container;
      max-width: $maxValue;
    } 
  }
}
@include make-container-max-widths();

.row {
  display: flex;
  flex-wrap: wrap;
}

@mixin make-col($numbColumns: 1, $totalColumns: $GRID_COLUMNS) {
  $width: 100% / $totalColumns * $numbColumns; 
  flex: 0 0 $width;
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: $width;
}

%col {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  min-height: 1px; // Prevent collapsing
  width: 100%;
}

.col {
  @extend %col;
  flex: 1 1 0%;
  max-width: 100%;
}

@mixin make-cols($gridColumns: $GRID_COLUMNS, $breakpoints: $BREAKPOINTS) {
  @each $breakpointKey, $breakpointValue in $breakpoints {
    $breakpointSuffix: breakpoint-suffix($breakpointKey);

    // Extend all columns from base class. @extend saves
    // ~2kb. Must be done in separate loop because extend 
    // can only be used outside media queries.
    @for $i from 1 through $gridColumns { 
      .col#{$breakpointSuffix}-#{$i} {
        @extend %col;
      };
    };

    @include media-min($breakpointKey) {
      @for $i from 1 through $gridColumns { 

        .col#{$breakpointSuffix}-#{$i} {
          @include make-col($i);
        };

      };
    };
  };
};
@include make-cols();


.align-top    { align-items: flex-start; }
.align-center { align-items: center; }
.align-bottom { align-items: flex-end; }

