
/*
 * VARIABLES
 **/

// Unit on which all spacing is based
$SPACING_BASE: 4px !default;

// Modular spacing scale
$SPACING_LEVELS: (0, 0.5, 1, 2, 3, 4, 6, 8, 12, 16) !default;
$SPACING_MAP: ();


/*
 * INIT
 **/

@function make-spacing-map($levels: $SPACING_LEVELS) {
  $map: (); 

  @for $i from 1 through length($levels) {
    $keyName: nth($levels, $i);
    $keyValue: nth($levels, $i) * $SPACING_BASE;

    @if $keyName == 0.5 {
      $keyName: half;
    }

    $map: map-merge($map, ($keyName: $keyValue));
  }

  @return $map;
}

$SPACING_MAP: make-spacing-map($levels: $SPACING_LEVELS);


/*
 * CONVENIENCE FUNCTIONS
 **/

@function spacing($level) {
  @return $SPACING_BASE * $level;
}

@function spacing-level($level, $modifier: 0) {
  $spacingKeys: map-keys($SPACING_MAP);
  $spacingPosition: index($spacingKeys, $level) + $modifier;
  
  // Make sure level exists in array
  @if $spacingPosition > 0 and $spacingPosition <= length($spacingKeys) {
    $spacingKey: nth($spacingKeys, $spacingPosition);
    @return map-get($SPACING_MAP, $spacingKey);
  }
  // Otherwise return null
  @else { @return null; };  
}


/*
 * MIXINS
 **/

@mixin inset($level, $isImportant: false) {
  padding: spacing-level($level) if($isImportant, !important, null);
}

@mixin inset-squish($level, $isImportant: false) {
  $levelValue:      spacing-level($level);
  $squishedValue:   spacing-level($level, $modifier: -1);

  padding: $squishedValue $levelValue if($isImportant, !important, null);
}

@mixin inset-stretch($level, $isImportant: false) {
  $levelValue:      spacing-level($level); 
  $stretchedValue:  spacing-level($level, $modifier: 1);

  padding: $stretchedValue $levelValue if($isImportant, !important, null);
}

@mixin stack($level, $isImportant: false) {
  margin-bottom: spacing-level($level) if($isImportant, !important, null);
}

@mixin inline($level, $isImportant: false) {
  margin-right: spacing-level($level) if($isImportant, !important, null);
}

@mixin bustout($level, $isImportant: false) {
  margin-left:  -1 * spacing-level($level) if($isImportant, !important, null);
  margin-right: -1 * spacing-level($level) if($isImportant, !important, null);
}

@mixin gutter($level, $isImportant: false) {
  $levelValue: spacing-level($level);

  margin-left: -$levelValue if($isImportant, !important, null);
  & > [class*=col] {
    padding-left: $levelValue if($isImportant, !important, null);
  }
}


/*
 * UTILITY CLASSES
 **/

// Utilities use !important in order to ensure styles 
// override those defined in a component's CSS.

@mixin make-spacing-utilities($breakpoints: $BREAKPOINTS) {
  @each $breakpointKey, $breakpointValue in $breakpoints {
    @include media-min($breakpointKey) {
      @each $levelKey, $levelValue in $SPACING_MAP {

        $breakpointSuffix: breakpoint-suffix($breakpointKey);

        // Make square insets
        .inset-#{$levelKey}#{$breakpointSuffix} {        
          @include inset($levelKey, $isImportant: true);
        };

        // Make squish insets
        .inset-squish-#{$levelKey}#{$breakpointSuffix} {        
          @include inset-squish($levelKey, $isImportant: true);
        };

        // Make stretch insets
        .inset-stretch-#{$levelKey}#{$breakpointSuffix} {        
          @include inset-stretch($levelKey, $isImportant: true); 
        };

        // Make stack spacing 
        .stack-#{$levelKey}#{$breakpointSuffix} {        
          @include stack($levelKey, $isImportant: true);
        };

        // Make inline spacing
        .inline-#{$levelKey}#{$breakpointSuffix} {        
          @include inline($levelKey, $isImportant: true);
        };

        // Make bustouts
        .bustout-#{$levelKey}#{$breakpointSuffix} {        
          @include bustout($levelKey, $isImportant: true);
        };

        // Make gutters
        .gutter-#{$levelKey}#{$breakpointSuffix} {        
          @include gutter($levelKey, $isImportant: true);
        };

      };
    };
  };
}; 

@include make-spacing-utilities();

.section {
  position: relative;
  padding-right: spacing-level(4) !important;
  padding-left:  spacing-level(4) !important;

  @include media-min(md) {
    padding-right: spacing-level(8) !important;
    padding-left:  spacing-level(8) !important;
  } 
}

.bustout-section {
  margin-right: -1 * spacing-level(4) !important;
  margin-left:  -1 * spacing-level(4) !important;

  @include media-min(md) {
    margin-right: -1 * spacing-level(8) !important;
    margin-left:  -1 * spacing-level(8) !important;
  } 
}

.stack-0-last {
  :last-child {
    @include stack(0, $isImportant: true);
  }
}

.inline-0-last {
  :last-child {
    @include inline(0, $isImportant: true);
  }
}



